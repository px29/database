{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue192;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The QueryPlan in the package project is the top-level class.\
\
Selection pushing:\
We implemented the selection pushing as instruction has recommended. First, we implemented the UnionFind class that has a 
\f1\fs22 \cf2 disjointSet map 
\f0\fs24 \cf0 stores unionFind elements with the help of 
\f1\fs22 WhereProcessForUnionFind
\f0\fs24  class which extracts where expression for each relation. 
\f1\fs22 WhereProcessForUnionFind
\f0\fs24  finds both unionFind elements (
\f1\fs22 \cf2 unionFind
\f0\fs24 \cf0 )and residual elements(
\f1\fs22 \cf2 residualJoinExpression,residualSelectExpression
\f0\fs24 \cf0 ).
\f1\fs22 mergerElements method 
\f0\fs24  store table attributes that meets unionFind requirement. 
\f1\fs22 findElement method finds the element if it exist in the element set already and returns it, or add it to the set if it does not exist and return it. 
\f0\fs24 Each UnionFind element\'92information are stored in Element class with upperBound, lowerBound, equality and element set. 
\f1\fs22 WhereProcessForUnionFind
\f0\fs24  finds lowerBound value, upperBound and Equality constraint for elements in the unionFind set. In the unionFind class we store the 
\f1\fs22 \cf2 unionFindSelectExpMap
\f0\fs24 \cf0  which stores selection conditions for each table that needs to be pushed. \
\
\pard\pardeftab720\partightenfactor0
\cf0 The choice of implementation for each logical selection operator: the choice is based on the computation cost of I/O for full scan (total tuple # * # of attribute * 4 / 4096) and index scan with clustered index ( 3 + p * r) or without cluster ( 3 + l * r  + t * r .). r is reduction factor (range of lowerBound to upperBound / range value of the relation).Whichever has the lower cost should be chosen. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
The choice of the join order: In the class ChooseJoinOrder we implement the algorithm as the instruction specifies. We use several arraylists of hashmaps to store V value, intermediate relation sizes, and costs for different layers of dynamic programming. For example, for three relations R,B,S, we denote them to be 0,1,2. For relation sizes, we store (0,10000) for R with 10000 tuples and (01, 5000) for R joining B with 5000 tuples after joining. For V values, we store(0A, 5000) for R.A with V value=5000. and (01A, 3000) for R joining B with R.A V value=3000. The other intermediate calculation algorithm is just the same as in the instruction. \
\
The choice of implementation for each join operator: In my Project 3 benchmarking, I noticed that SMJ runs much faster than BNLJ, so I implement all joins as SMJ where possible. However, SMJ does not apply to joins that have other-than-equality comparisons or to pure cross-products, so those are implemented using BNLJ with block size 5. Also , we hard-code the sorting method to be external sort since it\'92s obviously faster than in-memory sort. }